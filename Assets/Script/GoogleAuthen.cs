using System;
using UnityEngine;
using TMPro;
using System.Collections;
using UnityEngine.Networking;
using UnityEngine.SceneManagement;

public class GoogleAuthen : MonoBehaviour
{
    public TMP_Text statusText;
    private string clientId = "382397535757-jlr6pk7k9ibtdja6mustqm1p426t4c1j.apps.googleusercontent.com";
    private string redirectUri = "http://localhost:5000/callback";
    private string authUrl;
    private string serverUrl = "http://localhost:5000/register";
    public string nextScene = "MainScene";
    public string loginScene = "LoginScene"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

    void Start()
    {
        authUrl = "https://accounts.google.com/o/oauth2/auth" +
                  "?client_id=" + clientId +
                  "&redirect_uri=" + Uri.EscapeDataString(redirectUri) +
                  "&response_type=token" +
                  "&scope=email%20profile%20openid" +
                  "&prompt=select_account"; // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á

        Application.deepLinkActivated += OnDeepLink;

        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô Editor (‡∏à‡∏≥‡∏•‡∏≠‡∏á deep link)
#if UNITY_EDITOR
        // Uncomment ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö deep link ‡πÉ‡∏ô Editor ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
        // SimulateDeepLink("unitydl://auth?access_token=TEST_TOKEN_EDITOR");
#endif
    }

    public void OnSignIn()
    {
        Debug.Log("üîπ Opening Google Login: " + authUrl);
        Application.OpenURL(authUrl);
    }

    public void OnLogout()
    {
        Debug.Log("üîπ Logging out...");

        // ‡∏•‡∏ö Token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
        PlayerPrefs.DeleteKey("accessToken");
        PlayerPrefs.Save();

        // ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        StartCoroutine(LogoutAndSwitchScene());
    }

    IEnumerator LogoutAndSwitchScene()
    {
        yield return new WaitForSeconds(2);
        SceneManager.LoadScene(loginScene);
    }

    void OnDeepLink(string url)
    {
        Debug.Log("üîπ Received Deep Link: " + url);
        string token = ExtractTokenFromURL(url);

        if (!string.IsNullOrEmpty(token))
        {
            Debug.Log("‚úÖ Extracted Token: " + token);
            PlayerPrefs.SetString("accessToken", token); // ‡πÄ‡∏Å‡πá‡∏ö Token ‡πÑ‡∏ß‡πâ
            PlayerPrefs.Save();
            StartCoroutine(SendUserDataToServer(token));
        }
        else
        {
            Debug.LogError("‚ùå Failed to extract token from URL");
            UpdateStatusText("‚ùå Token extraction failed.");
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á deep link ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô Editor
    void SimulateDeepLink(string url)
    {
        Debug.Log("Simulating deep link: " + url);
        OnDeepLink(url);
    }

    IEnumerator SendUserDataToServer(string accessToken)
    {
        WWWForm form = new WWWForm();
        form.AddField("accessToken", accessToken);

        using (UnityWebRequest request = UnityWebRequest.Post(serverUrl, form))
        {
            // ‡∏ï‡∏±‡πâ‡∏á header ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á JSON ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ UploadHandlerRaw ‡πÅ‡∏ï‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÉ‡∏ä‡πâ WWWForm)
            request.SetRequestHeader("Content-Type", "application/json");
            yield return request.SendWebRequest();

#if UNITY_2020_1_OR_NEWER
            if (request.result != UnityWebRequest.Result.Success)
#else
            if (request.isNetworkError || request.isHttpError)
#endif
            {
                Debug.LogError("‚ùå Failed to send user data: " + request.error);
                UpdateStatusText("‚ùå Failed to send data: " + request.error);
            }
            else
            {
                Debug.Log("‚úÖ User data sent successfully: " + request.downloadHandler.text);
                UpdateStatusText("‚úÖ Login successful!");
                yield return new WaitForSeconds(1f);
                SceneManager.LoadScene(nextScene);
            }
        }
    }

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á token ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Fragment ‡πÅ‡∏•‡∏∞ Query String
    string ExtractTokenFromURL(string url)
    {
        try
        {
            Uri uri = new Uri(url);
            string token = null;
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô Fragment ‡∏Å‡πà‡∏≠‡∏ô (‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß response_type=token ‡∏à‡∏∞‡∏™‡πà‡∏á token ‡πÉ‡∏ô Fragment)
            if (!string.IsNullOrEmpty(uri.Fragment))
            {
                string fragment = uri.Fragment;
                if (fragment.StartsWith("#"))
                {
                    fragment = fragment.Substring(1);
                }

                var queryParams = fragment.Split('&');
                foreach (string param in queryParams)
                {
                    string[] keyValue = param.Split('=');
                    if (keyValue.Length == 2 && keyValue[0] == "access_token")
                    {
                        token = keyValue[1];
                        break;
                    }
                }
            }

            // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô Fragment ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô Query String
            if (string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(uri.Query))
            {
                string query = uri.Query.TrimStart('?');
                var queryParams = query.Split('&');
                foreach (string param in queryParams)
                {
                    string[] keyValue = param.Split('=');
                    if (keyValue.Length == 2 && keyValue[0] == "access_token")
                    {
                        token = keyValue[1];
                        break;
                    }
                }
            }
            return token;
        }
        catch (Exception ex)
        {
            Debug.LogError("Error parsing URL: " + ex.Message);
            return null;
        }
    }

    void UpdateStatusText(string message)
    {
        if (statusText != null)
        {
            statusText.text = message;
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà Google
    public void OpenGoogle()
    {
        Debug.Log("üîπ Opening Google in external browser");
        Application.OpenURL("https://www.google.com");
    }
}
